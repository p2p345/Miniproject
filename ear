#include <ros/ros.h>
    #include <move_base_msgs/MoveBaseAction.h>
    #include <actionlib/client/simple_action_client.h>
    #include <tf/transform_datatypes.h>
    #include <clear_costmap_recovery/clear_costmap_recovery.h>
    #include <pluginlib/class_list_macros.h>
    #include <vector>
    #include "std_msgs/String.h"
    #include <sstream>
    #include <iostream>

	int io = 0;

	typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

	void chatterCallback(const std_msgs::String::ConstPtr& msg)
	{
		ROS_INFO("%s", msg->data.c_str());
		std::string inputFromCal;
		inputFromCal =  msg->data.c_str();
		
		if (inputFromCal == "1")
		{
			ROS_INFO("Besked modtaget!");
			
				//return(io);
			bool succes;
     			//tell the action client that we want to spin a thread by default
     			MoveBaseClient ac("move_base", true);

		     	//wait for the action server to come up
     			while(!ac.waitForServer(ros::Duration(5.0)))
			{
       				ROS_INFO("Fail!");
     			}
   
     			move_base_msgs::MoveBaseGoal goal;
   
     			//we'll send a goal to the robot to move 1 meter forward

     			goal.target_pose.header.frame_id = "map";
     			goal.target_pose.header.stamp = ros::Time::now();
   
     			goal.target_pose.pose.position.x = 4.0;
     			goal.target_pose.pose.position.y = -1.1;
	     		goal.target_pose.pose.orientation.w = 1.0;  

    	 		ROS_INFO("Sending goal");
     			ac.sendGoal(goal);
   
     			ac.waitForResult();
			//io = 0;
   
     			if(ac.getState() == ac-tionlib::SimpleClientGoalState::SUCCEEDED)
			{
       				ROS_INFO("Succes");
				succes = true;
			} 
    			else
			{
       				ROS_INFO("No succes");
		       		succes = false;
			}  


			if (succes == true)
			{
     				while(!ac.waitForServer(ros::Duration(5.0)))
				{
       					ROS_INFO("It failed, waited for server!");
     				}
   
     				move_base_msgs::MoveBaseGoal goal;
   
     				//we'll send a goal to the robot to move 1 meter forward

     				goal.target_pose.header.frame_id = "map";
     				goal.target_pose.header.stamp = ros::Time::now();
   
     				goal.target_pose.pose.position.x = 0.3;
     				goal.target_pose.pose.position.y = 1.2;
    			 	goal.target_pose.pose.orientation.w = 1.0;
     
     				ROS_INFO("Sending goal");
     				ac.sendGoal(goal);
   
     				ac.waitForResult();
			}
		}
	}




  
    
    int main(int argc, char **argv){
	
	std::cout << "io: " << io << std::endl;

	ros::init(argc, argv, "ear");

	ros::NodeHandle n;

	ros::Subscriber sub = n.subscribe("location1", 1000, chatterCallback);

	ros::spin();
     
}
